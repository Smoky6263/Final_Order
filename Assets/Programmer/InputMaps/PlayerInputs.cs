//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Programmer/InputMaps/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""PlayerActions"",
            ""id"": ""bfef8e77-e8fe-4186-956c-73d51172705b"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""a0174a1a-cb5a-4609-bb28-67e25d322975"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""JumpIsPressed"",
                    ""type"": ""Button"",
                    ""id"": ""b4c70c25-9ddb-4e97-bb3e-00418c091653"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JumpIsReleased"",
                    ""type"": ""Button"",
                    ""id"": ""0036cac9-22b2-4cc9-b94d-7d9f59ff5b15"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MedKitPerformed"",
                    ""type"": ""Button"",
                    ""id"": ""f85b3fa8-2b4b-46ad-a10b-7a4c6a3297ab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RollPerformed"",
                    ""type"": ""Button"",
                    ""id"": ""14b2eba1-4f39-4b29-87c7-a9b4257a75bf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AttackPressed"",
                    ""type"": ""Button"",
                    ""id"": ""5c17f533-90fc-4cb5-841a-31a541ba1297"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector Keyboard"",
                    ""id"": ""2636cbad-bdea-49d6-8ee0-30a1e3387857"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ee72cffa-c748-44c5-86be-8eb5469149ca"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""36560fe8-6eb0-4c13-99b9-0c757eea492b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""587268f3-3fad-42d2-a69a-4a8f9c883a47"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""96b1fabe-0e7d-489d-bd0d-d93c3c4aedeb"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector Gamepad"",
                    ""id"": ""95300e84-4630-43d5-b154-9d04b533ff08"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""405713b7-03ef-433e-932f-becb70dcf6af"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JumpIsPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f2fce2e3-e179-4b57-b37a-1cd15f254f63"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JumpIsPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""45c94cd2-a986-4447-bff9-a5f30a1a037f"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MedKitPerformed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c11cfc45-36a1-4754-84ab-77846fe51972"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MedKitPerformed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a5299a38-869a-46b0-b548-d6a9b8cf984e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JumpIsReleased"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eedcd1ed-f40c-4bea-abf7-2920d7296798"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JumpIsReleased"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ac892641-a8cf-43a0-9c61-64bd6a7e554e"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RollPerformed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1972929d-33e7-45e3-87e5-0d3010c177a8"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RollPerformed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""40934b1c-2e14-4164-80ec-49a8414db5f4"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AttackPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UIActions"",
            ""id"": ""c03e7971-0a23-416b-a539-281a650c1012"",
            ""actions"": [
                {
                    ""name"": ""CallPauseMenu"",
                    ""type"": ""Button"",
                    ""id"": ""67a6b83e-5268-4615-88f7-c765341715ad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e81ca76b-8075-4159-9974-433bdaf8618a"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CallPauseMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UseInteractable"",
            ""id"": ""d2e67a62-54ba-4f1f-8405-823a26dc94de"",
            ""actions"": [
                {
                    ""name"": ""Use"",
                    ""type"": ""Button"",
                    ""id"": ""17fadc15-58ea-415d-8333-9abcdff627f5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0c377f96-bec8-41cf-a71d-aa73e8bca8ed"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Use"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerActions
        m_PlayerActions = asset.FindActionMap("PlayerActions", throwIfNotFound: true);
        m_PlayerActions_Movement = m_PlayerActions.FindAction("Movement", throwIfNotFound: true);
        m_PlayerActions_JumpIsPressed = m_PlayerActions.FindAction("JumpIsPressed", throwIfNotFound: true);
        m_PlayerActions_JumpIsReleased = m_PlayerActions.FindAction("JumpIsReleased", throwIfNotFound: true);
        m_PlayerActions_MedKitPerformed = m_PlayerActions.FindAction("MedKitPerformed", throwIfNotFound: true);
        m_PlayerActions_RollPerformed = m_PlayerActions.FindAction("RollPerformed", throwIfNotFound: true);
        m_PlayerActions_AttackPressed = m_PlayerActions.FindAction("AttackPressed", throwIfNotFound: true);
        // UIActions
        m_UIActions = asset.FindActionMap("UIActions", throwIfNotFound: true);
        m_UIActions_CallPauseMenu = m_UIActions.FindAction("CallPauseMenu", throwIfNotFound: true);
        // UseInteractable
        m_UseInteractable = asset.FindActionMap("UseInteractable", throwIfNotFound: true);
        m_UseInteractable_Use = m_UseInteractable.FindAction("Use", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerActions
    private readonly InputActionMap m_PlayerActions;
    private List<IPlayerActionsActions> m_PlayerActionsActionsCallbackInterfaces = new List<IPlayerActionsActions>();
    private readonly InputAction m_PlayerActions_Movement;
    private readonly InputAction m_PlayerActions_JumpIsPressed;
    private readonly InputAction m_PlayerActions_JumpIsReleased;
    private readonly InputAction m_PlayerActions_MedKitPerformed;
    private readonly InputAction m_PlayerActions_RollPerformed;
    private readonly InputAction m_PlayerActions_AttackPressed;
    public struct PlayerActionsActions
    {
        private @PlayerInputs m_Wrapper;
        public PlayerActionsActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerActions_Movement;
        public InputAction @JumpIsPressed => m_Wrapper.m_PlayerActions_JumpIsPressed;
        public InputAction @JumpIsReleased => m_Wrapper.m_PlayerActions_JumpIsReleased;
        public InputAction @MedKitPerformed => m_Wrapper.m_PlayerActions_MedKitPerformed;
        public InputAction @RollPerformed => m_Wrapper.m_PlayerActions_RollPerformed;
        public InputAction @AttackPressed => m_Wrapper.m_PlayerActions_AttackPressed;
        public InputActionMap Get() { return m_Wrapper.m_PlayerActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @JumpIsPressed.started += instance.OnJumpIsPressed;
            @JumpIsPressed.performed += instance.OnJumpIsPressed;
            @JumpIsPressed.canceled += instance.OnJumpIsPressed;
            @JumpIsReleased.started += instance.OnJumpIsReleased;
            @JumpIsReleased.performed += instance.OnJumpIsReleased;
            @JumpIsReleased.canceled += instance.OnJumpIsReleased;
            @MedKitPerformed.started += instance.OnMedKitPerformed;
            @MedKitPerformed.performed += instance.OnMedKitPerformed;
            @MedKitPerformed.canceled += instance.OnMedKitPerformed;
            @RollPerformed.started += instance.OnRollPerformed;
            @RollPerformed.performed += instance.OnRollPerformed;
            @RollPerformed.canceled += instance.OnRollPerformed;
            @AttackPressed.started += instance.OnAttackPressed;
            @AttackPressed.performed += instance.OnAttackPressed;
            @AttackPressed.canceled += instance.OnAttackPressed;
        }

        private void UnregisterCallbacks(IPlayerActionsActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @JumpIsPressed.started -= instance.OnJumpIsPressed;
            @JumpIsPressed.performed -= instance.OnJumpIsPressed;
            @JumpIsPressed.canceled -= instance.OnJumpIsPressed;
            @JumpIsReleased.started -= instance.OnJumpIsReleased;
            @JumpIsReleased.performed -= instance.OnJumpIsReleased;
            @JumpIsReleased.canceled -= instance.OnJumpIsReleased;
            @MedKitPerformed.started -= instance.OnMedKitPerformed;
            @MedKitPerformed.performed -= instance.OnMedKitPerformed;
            @MedKitPerformed.canceled -= instance.OnMedKitPerformed;
            @RollPerformed.started -= instance.OnRollPerformed;
            @RollPerformed.performed -= instance.OnRollPerformed;
            @RollPerformed.canceled -= instance.OnRollPerformed;
            @AttackPressed.started -= instance.OnAttackPressed;
            @AttackPressed.performed -= instance.OnAttackPressed;
            @AttackPressed.canceled -= instance.OnAttackPressed;
        }

        public void RemoveCallbacks(IPlayerActionsActions instance)
        {
            if (m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActionsActions @PlayerActions => new PlayerActionsActions(this);

    // UIActions
    private readonly InputActionMap m_UIActions;
    private List<IUIActionsActions> m_UIActionsActionsCallbackInterfaces = new List<IUIActionsActions>();
    private readonly InputAction m_UIActions_CallPauseMenu;
    public struct UIActionsActions
    {
        private @PlayerInputs m_Wrapper;
        public UIActionsActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @CallPauseMenu => m_Wrapper.m_UIActions_CallPauseMenu;
        public InputActionMap Get() { return m_Wrapper.m_UIActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActionsActions set) { return set.Get(); }
        public void AddCallbacks(IUIActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsActionsCallbackInterfaces.Add(instance);
            @CallPauseMenu.started += instance.OnCallPauseMenu;
            @CallPauseMenu.performed += instance.OnCallPauseMenu;
            @CallPauseMenu.canceled += instance.OnCallPauseMenu;
        }

        private void UnregisterCallbacks(IUIActionsActions instance)
        {
            @CallPauseMenu.started -= instance.OnCallPauseMenu;
            @CallPauseMenu.performed -= instance.OnCallPauseMenu;
            @CallPauseMenu.canceled -= instance.OnCallPauseMenu;
        }

        public void RemoveCallbacks(IUIActionsActions instance)
        {
            if (m_Wrapper.m_UIActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActionsActions @UIActions => new UIActionsActions(this);

    // UseInteractable
    private readonly InputActionMap m_UseInteractable;
    private List<IUseInteractableActions> m_UseInteractableActionsCallbackInterfaces = new List<IUseInteractableActions>();
    private readonly InputAction m_UseInteractable_Use;
    public struct UseInteractableActions
    {
        private @PlayerInputs m_Wrapper;
        public UseInteractableActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Use => m_Wrapper.m_UseInteractable_Use;
        public InputActionMap Get() { return m_Wrapper.m_UseInteractable; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UseInteractableActions set) { return set.Get(); }
        public void AddCallbacks(IUseInteractableActions instance)
        {
            if (instance == null || m_Wrapper.m_UseInteractableActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UseInteractableActionsCallbackInterfaces.Add(instance);
            @Use.started += instance.OnUse;
            @Use.performed += instance.OnUse;
            @Use.canceled += instance.OnUse;
        }

        private void UnregisterCallbacks(IUseInteractableActions instance)
        {
            @Use.started -= instance.OnUse;
            @Use.performed -= instance.OnUse;
            @Use.canceled -= instance.OnUse;
        }

        public void RemoveCallbacks(IUseInteractableActions instance)
        {
            if (m_Wrapper.m_UseInteractableActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUseInteractableActions instance)
        {
            foreach (var item in m_Wrapper.m_UseInteractableActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UseInteractableActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UseInteractableActions @UseInteractable => new UseInteractableActions(this);
    public interface IPlayerActionsActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJumpIsPressed(InputAction.CallbackContext context);
        void OnJumpIsReleased(InputAction.CallbackContext context);
        void OnMedKitPerformed(InputAction.CallbackContext context);
        void OnRollPerformed(InputAction.CallbackContext context);
        void OnAttackPressed(InputAction.CallbackContext context);
    }
    public interface IUIActionsActions
    {
        void OnCallPauseMenu(InputAction.CallbackContext context);
    }
    public interface IUseInteractableActions
    {
        void OnUse(InputAction.CallbackContext context);
    }
}
